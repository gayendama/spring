buildscript {
    repositories {
        maven { url "https://repo.grails.org/grails/core" }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsGradlePluginVersion"
        classpath "org.grails.plugins:hibernate5:7.2.1"
        classpath "gradle.plugin.com.github.erdi.webdriver-binaries:webdriver-binaries-gradle-plugin:2.6"
        classpath "com.bertramlabs.plugins:asset-pipeline-gradle:3.3.4"
    }
}


version "0.9_RC13"
group "springbatch"

apply plugin:"eclipse"
apply plugin:"idea"
apply plugin:"war"
apply plugin:"org.grails.grails-web"
apply plugin:"com.github.erdi.webdriver-binaries"
apply plugin:"com.bertramlabs.asset-pipeline"
apply plugin:"org.grails.grails-gsp"

repositories {
    maven { url "https://repo.grails.org/grails/core" }
}

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
}


def moduleExcludes = [
        'junit',
        'spring-aop',
        'spring-core',
        'spring-oxm',
        'spring-test',
        'spring-tx',
        'slf4j-log4j12',
        'log4j'
]

dependencies {
    developmentOnly("org.springframework.boot:spring-boot-devtools")
    compileOnly "io.micronaut:micronaut-inject-groovy"
    console "org.grails:grails-console"
    implementation "org.springframework.boot:spring-boot-starter-logging"
    implementation "org.springframework.boot:spring-boot-starter-validation"
    implementation "org.springframework.boot:spring-boot-autoconfigure"
    implementation "org.grails:grails-core"
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation "org.springframework.boot:spring-boot-starter-tomcat"
    implementation "org.grails:grails-web-boot"
    implementation "org.grails:grails-logging"
    implementation "org.grails:grails-plugin-rest"
    implementation "org.grails:grails-plugin-databinding"
    implementation "org.grails:grails-plugin-i18n"
    implementation "org.grails:grails-plugin-services"
    implementation "org.grails:grails-plugin-url-mappings"
    implementation "org.grails:grails-plugin-interceptors"
    implementation "org.grails.plugins:cache"
    implementation "org.grails.plugins:async"
    implementation "org.grails.plugins:scaffolding"
    implementation "org.grails.plugins:events"
    implementation "org.grails.plugins:hibernate5"
    implementation "org.hibernate:hibernate-core:5.6.3.Final"
    implementation "org.grails.plugins:gsp"
    profile "org.grails.profiles:web"
    runtimeOnly "org.glassfish.web:el-impl:2.2.1-b05"
    runtimeOnly "com.h2database:h2"
    runtimeOnly "org.apache.tomcat:tomcat-jdbc"
    runtimeOnly "javax.xml.bind:jaxb-api:2.3.1"
    runtimeOnly "com.bertramlabs.plugins:asset-pipeline-grails:3.3.4"
    testImplementation "io.micronaut:micronaut-inject-groovy"
    testImplementation "org.grails:grails-gorm-testing-support"
    testImplementation "org.mockito:mockito-core"
    testImplementation "org.grails:grails-web-testing-support"
    testImplementation "org.grails.plugins:geb"
    testImplementation "org.seleniumhq.selenium:selenium-remote-driver:4.0.0"
    testImplementation "org.seleniumhq.selenium:selenium-api:4.0.0"
    testImplementation "org.seleniumhq.selenium:selenium-support:4.0.0"
    testRuntimeOnly "org.seleniumhq.selenium:selenium-chrome-driver:4.0.0"
    testRuntimeOnly "org.seleniumhq.selenium:selenium-firefox-driver:4.0.0"

    // Spring batch
    implementation("org.springframework.batch:spring-batch-core:${springBatchVersion}") {
        moduleExcludes.each { exclude module: it }
    }
    implementation("org.springframework.batch:spring-batch-infrastructure:${springBatchVersion}") {
        moduleExcludes.each { exclude module: it }
    }
    implementation( "org.springframework.batch:spring-batch-admin-resources:${springBatchAdminVersion}") {
        moduleExcludes.each { exclude module: it }
    }
    implementation("org.springframework.batch:spring-batch-admin-manager:${springBatchAdminVersion}") {
        moduleExcludes.each { exclude module: it }
    }

    testRuntimeOnly "org.springframework.batch:spring-batch-test:${springBatchVersion}"

    implementation 'com.opencsv:opencsv:4.6'

    // Joda Time // Joda
    implementation "joda-time:joda-time:2.9.6"

    // Rest Client
    implementation group: 'org.grails', name: 'grails-datastore-rest-client', version: '6.1.9.RELEASE'

    //postgresql     https://mvnrepository.com/artifact/org.postgresql/postgresql
    runtimeOnly group: 'org.postgresql', name: 'postgresql', version: '42.3.1'

    //ajout des dependances de keycloak
    implementation "org.keycloak:keycloak-spring-security-adapter:16.1.0"
    implementation "org.springframework.security:spring-security-config:5.6.1"
    implementation "org.springframework.security:spring-security-web:5.6.1"

    // Include external jars
    implementation fileTree(dir: 'libs', include: '*.jar')

    // Int√©gration consul java-api plugin
    implementation "com.ecwid.consul:consul-api:1.4.5"

    implementation 'io.micronaut:micronaut-http-client'
    //keycloak jwt
    // https://mvnrepository.com/artifact/io.micronaut/micronaut-security-jwt
    implementation group: 'io.micronaut', name: 'micronaut-security-jwt', version: '1.4.0'

    implementation "org.codehaus.groovy:groovy-dateutil:3.0.4"

    // https://mvnrepository.com/artifact/org.apache.tika/tika-parsers
    implementation group: 'org.apache.tika', name: 'tika-parsers', version: '1.23'


}

bootRun {
    ignoreExitValue true
    jvmArgs(
        '-Dspring.output.ansi.enabled=always', 
        '-noverify', 
        '-XX:TieredStopAtLevel=1',
        '-Xmx1024m')
    sourceResources sourceSets.main
    String springProfilesActive = 'spring.profiles.active'
    systemProperty springProfilesActive, System.getProperty(springProfilesActive)
}

tasks.withType(GroovyCompile) {
    configure(groovyOptions) {
        forkOptions.jvmArgs = ['-Xmx1024m']
    }
}

tasks.withType(Test) {
    useJUnitPlatform()
}

webdriverBinaries {
    chromedriver '2.45.0'
    geckodriver '0.30.0'
}

tasks.withType(Test) {
    systemProperty "geb.env", System.getProperty('geb.env')
    systemProperty "geb.build.reportsDir", reporting.file("geb/integrationTest")
    systemProperty "webdriver.chrome.driver", System.getProperty('webdriver.chrome.driver')
    systemProperty "webdriver.gecko.driver", System.getProperty('webdriver.gecko.driver')
}


assets {
    minifyJs = true
    minifyCss = true
}
